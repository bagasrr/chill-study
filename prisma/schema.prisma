generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  name              String?
  email             String      @unique
  image             String?
  deviceToken       String?
  createdAt         DateTime    @default(now())
  emailVerified     DateTime?
  role              String?
  IsDeleted         DateTime?
  CreatedBy         String?
  LastUpdatedBy     String?
  LastUpdateDate    DateTime?
  Status            Int?
  CompanyCode       String?
  accounts          Account[]
  kelasUser         KelasUser[]
  payments          Payment[]   @relation(name: "UserPayments")
  progress          Progress[]
  sessions          Session[]
  devTokenExpiredAt DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Kelas {
  id                String        @id @default(cuid())
  title             String
  deskripsi         String?
  thumbnail         String?
  createdAt         DateTime      @default(now())
  IsDeleted         DateTime?
  CreatedBy         String?
  LastUpdatedBy     String?
  LastUpdateDate    DateTime?
  Status            Int?
  CompanyCode       String?

  kelasUser         KelasUser[]
  materi            Materi[]
}

model KelasUser {
  id              String      @id @default(cuid())
  userId          String
  kelasId         String
  createdAt       DateTime    @default(now())
  kelas           Kelas       @relation(fields: [kelasId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  IsDeleted       DateTime?
  CreatedBy       String?
  LastUpdatedBy   String?
  LastUpdateDate  DateTime?
  Status          Int?
  CompanyCode     String?     

  @@unique([userId, kelasId])
}

model Materi {
  id              String       @id @default(cuid())
  title           String
  content         String?
  videoUrl        String?
  price           Int
  kelasId         String
  createdAt       DateTime     @default(now())
  kelas           Kelas        @relation(fields: [kelasId], references: [id])
  IsDeleted       DateTime?
  CreatedBy       String?
  LastUpdatedBy   String?
  LastUpdateDate  DateTime?
  Status          Int?
  CompanyCode     String?

  progress        Progress[]
  paymentItems    PaymentItem[]
  
}

model Progress {
  id              String      @id @default(cuid())
  userId          String
  materiId        String
  status          Boolean     @default(false)
  updatedAt       DateTime    @updatedAt
  materi          Materi      @relation(fields: [materiId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  IsDeleted       DateTime?
  CreatedBy       String?
  LastUpdatedBy   String?
  LastUpdateDate  DateTime?
  Status          Int?
  CompanyCode     String?

  @@unique([userId, materiId])
}

model Payment {
  id              String         @id @default(cuid())
  userId          String
  status          PaymentStatus
  createdAt       DateTime       @default(now())
  IsDeleted       DateTime?
  CreatedBy       String?
  LastUpdatedBy   String?
  LastUpdateDate  DateTime?
  Status          Int?
  CompanyCode     String?

  user            User @relation(name: "UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  items           PaymentItem[]

  @@unique([userId, status], map: "OneActiveCartOrCheckout")
}


model PaymentItem {
  id              String   @id @default(cuid())
  paymentId       String
  materiId        String
  price           Int
  createdAt       DateTime     @default(now())
  IsDeleted       DateTime?
  CreatedBy       String?
  LastUpdatedBy   String?
  LastUpdateDate  DateTime?
  Status          Int?
  CompanyCode     String?
  materi     Materi   @relation(fields: [materiId], references: [id])
  payment    Payment  @relation(fields: [paymentId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum PaymentStatus {
  CART     
  PENDING  
  PAID    
  FAILED   
  CANCELLED
}