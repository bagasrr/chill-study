generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String        @unique
  image          String?
  deviceToken    String?       // untuk cek 1 user 1 device
  emailVerified  DateTime?
  
  // custom fields:

  role        String?       // kalau kamu mau tambahin
  createdAt   DateTime      @default(now())

  accounts    Account[]
  sessions    Session[]
  payments    Payment[]
  kelasUser   KelasUser[]
  progress    Progress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?  
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId]) 
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Kelas {
  id        String        @id @default(cuid())
  title     String
  deskripsi String?
  thumbnail String?
  harga     Int
  createdAt DateTime      @default(now())

  materi    Materi[]
  kelasUser KelasUser[]
  paymentItems PaymentItem[]
}

model KelasUser {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  kelas     Kelas    @relation(fields: [kelasId], references: [id])
  kelasId   String
  createdAt DateTime @default(now())

  @@unique([userId, kelasId])
}

model Materi {
  id        String    @id @default(cuid())
  title     String
  content   String?
  videoUrl  String?
  kelas     Kelas     @relation(fields: [kelasId], references: [id])
  kelasId   String
  createdAt DateTime  @default(now())

  progress  Progress[]
}

model Progress {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  materi    Materi   @relation(fields: [materiId], references: [id])
  materiId  String
  status    Boolean  @default(false)
  updatedAt DateTime @updatedAt

  @@unique([userId, materiId])
}

model Payment {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  status    String        // pending, success, failed, canceled
  createdAt DateTime      @default(now())

  items     PaymentItem[]

  @@unique([userId], map: "OneActivePayment") // batasi 1 transaksi aktif per user
}

model PaymentItem {
  id         String   @id @default(cuid())
  payment    Payment  @relation(fields: [paymentId], references: [id])
  paymentId  String
  kelas      Kelas    @relation(fields: [kelasId], references: [id])
  kelasId    String
  price      Int
}


enum Role {
  STUDENT
  TEACHER
  ADMIN
}