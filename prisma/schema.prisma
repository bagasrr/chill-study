generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  name              String?
  email             String        @unique
  image             String?
  deviceToken       String?
  createdAt         DateTime      @default(now())
  emailVerified     DateTime?
  role              String?
  IsDeleted         DateTime?
  CreatedBy         String?
  LastUpdatedBy     String?
  LastUpdateDate    DateTime?
  Status            Int?
  CompanyCode       String?
  accounts          Account[]
  kelasUser         KelasUser[]
  payments          Payment[]     @relation(name: "UserPayments")
  progress          Progress[]
  sessions          Session[]
  devTokenExpiredAt DateTime?
  certificates      Certificate[]
  examResult        ExamResult[]
  googleAccessToken   String?    
  googleRefreshToken  String?
  googleTokenExpiry   DateTime?
  googleIdToken       String?

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Kelas {
  id             String    @id @default(cuid())
  title          String
  deskripsi      String?
  thumbnail      String?
  createdAt      DateTime  @default(now())
  IsDeleted      DateTime?
  CreatedBy      String?
  LastUpdatedBy  String?
  LastUpdateDate DateTime?
  Status         Int?
  CompanyCode    String?

  kelasUser    KelasUser[]
  materi       Materi[]
  certificates Certificate[]
  exam         Exam[]
}

model KelasUser {
  id             String    @id @default(cuid())
  userId         String
  kelasId        String
  createdAt      DateTime  @default(now())
  kelas          Kelas     @relation(fields: [kelasId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
  IsDeleted      DateTime?
  CreatedBy      String?
  LastUpdatedBy  String?
  LastUpdateDate DateTime?
  Status         Int?
  CompanyCode    String?

  @@unique([userId, kelasId])
}

model Materi {
  id             String    @id @default(cuid())
  title          String
  content        String?
  videoUrl       String?
  price          Int
  kelasId        String
  createdAt      DateTime  @default(now())
  kelas          Kelas     @relation(fields: [kelasId], references: [id])
  IsDeleted      DateTime?
  CreatedBy      String?
  LastUpdatedBy  String?
  LastUpdateDate DateTime?
  Status         Int?
  CompanyCode    String?

  progress     Progress[]
  paymentItems PaymentItem[]
}

model Progress {
  id             String    @id @default(cuid())
  userId         String
  materiId       String
  status         Boolean   @default(false)
  updatedAt      DateTime  @updatedAt
  materi         Materi    @relation(fields: [materiId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
  IsDeleted      DateTime?
  CreatedBy      String?
  LastUpdatedBy  String?
  LastUpdateDate DateTime?
  Status         Int?
  CompanyCode    String?

  @@unique([userId, materiId])
}

model Payment {
  id             String        @id @default(cuid())
  userId         String
  orderId        String        @unique
  status         PaymentStatus
  createdAt      DateTime      @default(now())
  IsDeleted      DateTime?
  CreatedBy      String?
  LastUpdatedBy  String?
  LastUpdateDate DateTime?
  Status         Int?
  CompanyCode    String?

  user  User          @relation(name: "UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  items PaymentItem[]
}

model PaymentItem {
  id             String    @id @default(cuid())
  paymentId      String
  materiId       String
  price          Int
  createdAt      DateTime  @default(now())
  IsDeleted      DateTime?
  CreatedBy      String?
  LastUpdatedBy  String?
  LastUpdateDate DateTime?
  Status         Int?
  CompanyCode    String?
  materi         Materi    @relation(fields: [materiId], references: [id])
  payment        Payment   @relation(fields: [paymentId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Official {
  id           String        @id @default(cuid())
  name         String
  position     String
  signatureUrl String // URL to signature image in Supabase
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())

  isDeleted        Boolean  @default(false)
  CreatedBy        String?
  LastUpdateDate   DateTime?
  LastUpdatedBy    String?

  certificates Certificate[]
}

model Certificate {
  id         String   @id @default(cuid())
  number     String   @unique
  userId     String
  kelasId    String
  officialId String
  issuedAt   DateTime @default(now())
  pdfUrl     String?

  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedDate   DateTime?
  LastUpdatedBy String?
  CreatedBy     String?

  user     User     @relation(fields: [userId], references: [id])
  kelas    Kelas    @relation(fields: [kelasId], references: [id])
  official Official @relation(fields: [officialId], references: [id])
}

model Exam {
  id          String       @id @default(cuid())
  kelasId     String
  title       String
  description String?
  kelas       Kelas        @relation(fields: [kelasId], references: [id])
  questions   Question[]
  createdAt   DateTime     @default(now())

  isDeleted        Boolean  @default(false)
  CreatedBy        String?
  LastUpdateDate   DateTime?
  LastUpdatedBy    String?
  examResult  ExamResult[]
  graduate    Int          @default(0)
}

model Question {
  id            String @id @default(cuid())
  examId        String
  questionText  String
  questionImage String?
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer String // 'A', 'B', 'C', 'D'
  isDeleted     Boolean  @default(false)
  createdAt        DateTime @default(now())
  CreatedBy        String?
  LastUpdateDate   DateTime?
  LastUpdatedBy    String?

  exam          Exam   @relation(fields: [examId], references: [id])
}

model ExamResult {
  id          String   @id @default(cuid())
  userId      String
  examId      String
  score       Int
  submittedAt DateTime @default(now())

  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())
  CreatedBy        String?
  LastUpdateDate   DateTime?
  LastUpdatedBy    String?

  exam        Exam     @relation(fields: [examId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}


model TemporaryUpload {
  id        String   @id @default(uuid())
  userId    String
  path      String
  bucket    String   @default("questions")
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
}


enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum PaymentStatus {
  CART
  PENDING
  PAID
  FAILED
  CANCELLED
}
