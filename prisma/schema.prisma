generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  image         String?
  deviceToken   String?
  createdAt     DateTime    @default(now())
  emailVerified DateTime?
  role          String?
  accounts      Account[]
  kelasUser     KelasUser[]
  payments      Payment?
  progress      Progress[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Kelas {
  id           String        @id @default(cuid())
  title        String
  deskripsi    String?
  thumbnail    String?
  harga        Int
  createdAt    DateTime      @default(now())
  kelasUser    KelasUser[]
  materi       Materi[]
  paymentItems PaymentItem[]
}

model KelasUser {
  id        String   @id @default(cuid())
  userId    String
  kelasId   String
  createdAt DateTime @default(now())
  kelas     Kelas    @relation(fields: [kelasId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, kelasId])
}

model Materi {
  id        String     @id @default(cuid())
  title     String
  content   String?
  videoUrl  String?
  kelasId   String
  createdAt DateTime   @default(now())
  kelas     Kelas      @relation(fields: [kelasId], references: [id])
  progress  Progress[]
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  materiId  String
  status    Boolean  @default(false)
  updatedAt DateTime @updatedAt
  materi    Materi   @relation(fields: [materiId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, materiId])
}

model Payment {
  id        String        @id @default(cuid())
  userId    String        @unique(map: "OneActivePayment")
  status    String
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
  items     PaymentItem[]
}

model PaymentItem {
  id        String  @id @default(cuid())
  paymentId String
  kelasId   String
  price     Int
  kelas     Kelas   @relation(fields: [kelasId], references: [id])
  payment   Payment @relation(fields: [paymentId], references: [id])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}
